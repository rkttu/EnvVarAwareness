using System;

namespace EnvVarAwareness.Azure.AppServices
{
    /// <summary>
    /// Represents a collection of environment variables used in Azure Web Apps. (Functions)
    /// </summary>
    /// <see href="https://learn.microsoft.com/en-us/azure/app-service/reference-app-settings"/>
    /// <seealso href="https://github.com/microsoft/Oryx/blob/main/doc/configuration.md"/>
    /// <seealso href="https://learn.microsoft.com/en-us/azure/azure-functions/functions-app-settings"/>
    public sealed class FunctionsEnv : EnvBase
    {
        /// <summary>
        /// Set to 0 to disable the functions cache.
        /// </summary>
        public string? WebsiteFunctionsArmCacheEnabled => this["WEBSITE_FUNCTIONS_ARMCACHE_ENABLED"];

        /// <summary>
        /// The maximum number of instances that the app can scale out to. Default is no limit.
        /// </summary>
        public string? WebsiteMaxDynamicApplicationScaleOut => this["WEBSITE_MAX_DYNAMIC_APPLICATION_SCALE_OUT"];

        /// <summary>
        /// Specifies the repository or provider to use for key storage. Keys are always encrypted before being stored using a secret unique to your function app.
        /// </summary>
        public string? AzureWebJobsSecretStorageType => this["AzureWebJobsSecretStorageType"];

        /// <summary>
        /// The version of the Functions runtime that hosts your function app. A tilde (~) with major version means use the latest version of that major version (for example, ~4). When new minor versions of the same major version are available, they're automatically installed in the function app.
        /// </summary>
        public string? FunctionsExtensionVersion => this["FUNCTIONS_EXTENSION_VERSION"];

        /// <summary>
        /// The language or language stack of the worker runtime to load in the function app. This corresponds to the language being used in your application (for example, python). Starting with version 2.x of the Azure Functions runtime, a given function app can only support a single language.
        /// </summary>
        public string? FunctionsWorkerRuntime => this["FUNCTIONS_WORKER_RUNTIME"];

        /// <summary>
        /// Specifies the connection string for an Azure Storage account that the Functions runtime uses for normal operations. Some uses of this storage account by Functions include key management, timer trigger management, and Event Hubs checkpoints. The storage account must be a general-purpose one that supports blobs, queues, and tables. For more information, see Storage account requirements.
        /// </summary>
        public string? AzureWebJobsStorage => this["AzureWebJobsStorage"];

        /// <summary>
        /// Connection string for storage account where the function app code and configuration are stored in event-driven scaling plans. For more information, see Storage account connection setting.
        /// </summary>
        public string? WebsiteContentAzureFileConnectionString => this["WEBSITE_CONTENTAZUREFILECONNECTIONSTRING"];

        /// <summary>
        /// The name of the file share that Functions uses to store function app code and configuration files. This content is required by event-driven scaling plans. Used with WEBSITE_CONTENTAZUREFILECONNECTIONSTRING. Default is a unique string generated by the runtime, which begins with the function app name. For more information, see Storage account connection setting.
        /// </summary>
        public string? WebsiteContentShare => this["WEBSITE_CONTENTSHARE"];

        /// <summary>
        /// A value of 1 enables your function app to scale when you have your storage account restricted to a virtual network. You should enable this setting when restricting your storage account to a virtual network. Only required when using WEBSITE_CONTENTSHARE and WEBSITE_CONTENTAZUREFILECONNECTIONSTRING. To learn more, see Restrict your storage account to a virtual network.
        /// </summary>
        /// <remarks>
        /// WEBSITE_CONTENTOVERVNET is a legacy app setting that has been replaced by the vnetContentShareEnabled site property.
        /// </remarks>
        [Obsolete("WEBSITE_CONTENTOVERVNET is a legacy app setting that has been replaced by the vnetContentShareEnabled site property.")]
        public string? WebsiteContentOverVNet => this["WEBSITE_CONTENTOVERVNET"];

        /// <summary>
        /// Controls whether Brotli encoding is used for compression instead of the default gzip compression. When WEBSITE_ENABLE_BROTLI_ENCODING is set to 1, Brotli encoding is used; otherwise gzip encoding is used.
        /// </summary>
        public string? WebsiteEnableBrotliEncoding => this["WEBSITE_ENABLE_BROTLI_ENCODING"];

        /// <summary>
        /// Indicates whether to use a specific cold start optimization when running on the Consumption plan. Set to 0 to disable the cold-start optimization on the Consumption plan.
        /// </summary>
        public string? WebsiteUsePlaceholder => this["WEBSITE_USE_PLACEHOLDER"];

        /// <summary>
        /// Read-only. Shows whether the function app is running on a placeholder host (generalized) or its own host (specialized).
        /// </summary>
        public string? WebsitePlaceholderMode => this["WEBSITE_PLACEHOLDER_MODE"];

        /// <summary>
        /// When your app runs from a ZIP package ( WEBSITE_RUN_FROM_PACKAGE=1), the five most recently deployed ZIP packages are cached in the app's file system (D:\home\data\SitePackages). Set this variable to 1 to disable this cache. For Linux consumption apps, the ZIP package cache is disabled by default.
        /// </summary>
        public string? WebsiteDisableZipCache => this["WEBSITE_DISABLE_ZIP_CACHE"];
    }
}
